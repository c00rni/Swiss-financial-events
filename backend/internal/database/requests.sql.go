// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: requests.sql

package database

import (
	"context"
	"time"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO requests (id, user_id, date)
VALUES (?, ?, ?)
RETURNING id, user_id, date
`

type CreateRequestParams struct {
	ID     string
	UserID string
	Date   time.Time
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, createRequest, arg.ID, arg.UserID, arg.Date)
	var i Request
	err := row.Scan(&i.ID, &i.UserID, &i.Date)
	return i, err
}

const getUserRequests = `-- name: GetUserRequests :many
SELECT id, user_id, date
FROM requests
WHERE user_id = ?
AND date >= ?
ORDER BY date
`

type GetUserRequestsParams struct {
	UserID string
	Date   time.Time
}

func (q *Queries) GetUserRequests(ctx context.Context, arg GetUserRequestsParams) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, getUserRequests, arg.UserID, arg.Date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(&i.ID, &i.UserID, &i.Date); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
