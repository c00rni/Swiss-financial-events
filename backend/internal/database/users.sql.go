// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, verified_email, name, given_name, family_name, picture, token, api_key)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, email, verified_email, name, given_name, family_name, picture, token, api_key
`

type CreateUserParams struct {
	ID            string
	Email         string
	VerifiedEmail bool
	Name          string
	GivenName     string
	FamilyName    string
	Picture       string
	Token         string
	ApiKey        string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.VerifiedEmail,
		arg.Name,
		arg.GivenName,
		arg.FamilyName,
		arg.Picture,
		arg.Token,
		arg.ApiKey,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.VerifiedEmail,
		&i.Name,
		&i.GivenName,
		&i.FamilyName,
		&i.Picture,
		&i.Token,
		&i.ApiKey,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, verified_email, name, given_name, family_name, picture, token, api_key
FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.VerifiedEmail,
		&i.Name,
		&i.GivenName,
		&i.FamilyName,
		&i.Picture,
		&i.Token,
		&i.ApiKey,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET (verified_email, name, given_name, family_name, picture, token) = (?, ?, ?, ?, ?, ?)
WHERE email = ?
RETURNING id, email, verified_email, name, given_name, family_name, picture, token, api_key
`

func (q *Queries) UpdateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.VerifiedEmail,
		&i.Name,
		&i.GivenName,
		&i.FamilyName,
		&i.Picture,
		&i.Token,
		&i.ApiKey,
	)
	return i, err
}

const updateUserApiKey = `-- name: UpdateUserApiKey :one
UPDATE users
SET api_key = ?
WHERE email = ?
RETURNING id, email, verified_email, name, given_name, family_name, picture, token, api_key
`

type UpdateUserApiKeyParams struct {
	ApiKey string
	Email  string
}

func (q *Queries) UpdateUserApiKey(ctx context.Context, arg UpdateUserApiKeyParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserApiKey, arg.ApiKey, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.VerifiedEmail,
		&i.Name,
		&i.GivenName,
		&i.FamilyName,
		&i.Picture,
		&i.Token,
		&i.ApiKey,
	)
	return i, err
}

const updateUserToken = `-- name: UpdateUserToken :one
UPDATE users
SET token = ?
WHERE email = ?
RETURNING id, email, verified_email, name, given_name, family_name, picture, token, api_key
`

type UpdateUserTokenParams struct {
	Token string
	Email string
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserToken, arg.Token, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.VerifiedEmail,
		&i.Name,
		&i.GivenName,
		&i.FamilyName,
		&i.Picture,
		&i.Token,
		&i.ApiKey,
	)
	return i, err
}
